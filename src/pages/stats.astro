---
import fs from "fs";
import path from "path";
import Layout from "../Layouts/Layout.astro";

interface CampeonStat {
  campeon: string;
  cantidad?: number;
  winrate?: number;
}

interface JugadorStat {
  jugador: string;
  kills?: number;
  kda?: number;
  cantidad?: number;
}

interface EquipoStat {
  equipo: string;
  tiempo?: string;
  cantidad?: number;
}

interface EstadisticasGenerales {
  cantidad_pentakills: number;
  robos_baron: number;
  remontadas: number;
  campeones_distintos: number;
  teemo_jugado: boolean;
  teemo_mensaje: string;
}

interface DatosWeb {
  top_picks: CampeonStat[];
  top_bans: CampeonStat[];
  top_kills: JugadorStat[];
  top_victorias_cortas: EquipoStat[];
  top_kda: JugadorStat[];
  top_winrate: CampeonStat[];
  low_winrate?: CampeonStat[];
  top_kills_c?: CampeonStat[];
  top_sangre?: JugadorStat[];
  top_equipos_distintos?: EquipoStat[];
  top_jugadores_distintos?: JugadorStat[];
  top_kills_e?: EquipoStat[];
  pentakills_jugadores?: string[];
  estadisticas_generales?: EstadisticasGenerales;
  ancianos_por_equipo?: EquipoStat[];
  barones_por_equipo?: EquipoStat[];
}

// Leer el archivo JSON con los datos
const datosPath = "./src/data/datos_web.json";

let datos: DatosWeb;

try {
  const fileContent = fs.readFileSync(datosPath, "utf-8");
  datos = JSON.parse(fileContent) as DatosWeb;
} catch (error) {
  console.error("Error al leer los datos:", error);
  datos = {
    top_picks: [],
    top_bans: [],
    top_kills: [],
    top_victorias_cortas: [],
    top_kda: [],
    top_winrate: [],
    low_winrate: [],
    top_kills_c: [],
    top_sangre: [],
    top_equipos_distintos: [],
    top_jugadores_distintos: [],
    top_kills_e: [],
    pentakills_jugadores: [],
    estadisticas_generales: {
      cantidad_pentakills: 0,
      robos_baron: 0,
      remontadas: 0,
      campeones_distintos: 0,
      teemo_jugado: false,
      teemo_mensaje: "No se ha jugado Teemo",
    },
    ancianos_por_equipo: [],
    barones_por_equipo: [],
  };
}
---

<Layout title="Worlds 2025 - Estadísticas">
  <div class="container">
    <h1>⚔️ Worlds 2025 Statistics ⚔️</h1>
    <p class="subtitle">
      Selecciona una categoría para ver las estadísticas completas
    </p>

    <!-- Selector de Estadísticas -->
    <div id="selector-view" class="selector-container">
      <button class="stat-card" onclick="mostrarEstadistica('picks')">
        <span class="card-icon">🏆</span>
        <span class="card-nombre">Top Picks</span>
      </button>
      <button class="stat-card" onclick="mostrarEstadistica('bans')">
        <span class="card-icon">🚫</span>
        <span class="card-nombre">Top Bans</span>
      </button>
      <button class="stat-card" onclick="mostrarEstadistica('kills-record')">
        <span class="card-icon">💀</span>
        <span class="card-nombre">Récord de Kills</span>
      </button>
      <button
        class="stat-card"
        onclick="mostrarEstadistica('victorias-cortas')"
      >
        <span class="card-icon">⚡</span>
        <span class="card-nombre">Victorias Rápidas</span>
      </button>
      <button class="stat-card" onclick="mostrarEstadistica('kda')">
        <span class="card-icon">📊</span>
        <span class="card-nombre">Top KDA</span>
      </button>
      <button class="stat-card" onclick="mostrarEstadistica('winrate')">
        <span class="card-icon">📈</span>
        <span class="card-nombre">Mayor Winrate</span>
      </button>
      <button class="stat-card" onclick="mostrarEstadistica('low-winrate')">
        <span class="card-icon">📉</span>
        <span class="card-nombre">Menor Winrate</span>
      </button>
      <button class="stat-card" onclick="mostrarEstadistica('kills-campeon')">
        <span class="card-icon">🗡️</span>
        <span class="card-nombre">Kills por Campeón</span>
      </button>
      <button class="stat-card" onclick="mostrarEstadistica('primera-sangre')">
        <span class="card-icon">🩸</span>
        <span class="card-nombre">Primera Sangre</span>
      </button>
      <button
        class="stat-card"
        onclick="mostrarEstadistica('equipos-distintos')"
      >
        <span class="card-icon">🎭</span>
        <span class="card-nombre">Campeones por Equipo</span>
      </button>
      <button
        class="stat-card"
        onclick="mostrarEstadistica('jugadores-distintos')"
      >
        <span class="card-icon">🎮</span>
        <span class="card-nombre">Campeones por Jugador</span>
      </button>
      <button class="stat-card" onclick="mostrarEstadistica('kills-equipo')">
        <span class="card-icon">⚔️</span>
        <span class="card-nombre">Kills por Equipo</span>
      </button>
      <button class="stat-card" onclick="mostrarEstadistica('ancianos')">
        <span class="card-icon">🐉</span>
        <span class="card-nombre">Dragones Ancianos</span>
      </button>
      <button class="stat-card" onclick="mostrarEstadistica('barones')">
        <span class="card-icon">👑</span>
        <span class="card-nombre">Barones</span>
      </button>
      <button class="stat-card" onclick="mostrarEstadistica('pentakills')">
        <span class="card-icon">🌟</span>
        <span class="card-nombre">Pentakills</span>
      </button>
      <button class="stat-card" onclick="mostrarEstadistica('generales')">
        <span class="card-icon">📊</span>
        <span class="card-nombre">Estadísticas Generales</span>
      </button>
    </div>

    <!-- Top Picks -->
    <div id="stat-picks" class="stat-view" style="display: none;">
      <button class="btn-volver" onclick="volverSelector()">← Volver</button>
      <div class="stat-section">
        <h2 class="stat-title">🏆 Top Picks Completo</h2>
        <table class="full-table">
          <thead>
            <tr><th>Pos</th><th>Campeón</th><th>Picks</th></tr>
          </thead>
          <tbody>
            {
              datos.top_picks.map((item, index) => (
                <tr>
                  <td>
                    <span
                      class={`rank rank-${index + 1 <= 3 ? index + 1 : ""}`}
                    >
                      {index + 1}
                    </span>
                  </td>
                  <td>{item.campeon}</td>
                  <td>
                    <span class="value">{item.cantidad}</span>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>

    <!-- Top Bans -->
    <div id="stat-bans" class="stat-view" style="display: none;">
      <button class="btn-volver" onclick="volverSelector()">← Volver</button>
      <div class="stat-section">
        <h2 class="stat-title">🚫 Top Bans Completo</h2>
        <table class="full-table">
          <thead>
            <tr><th>Pos</th><th>Campeón</th><th>Bans</th></tr>
          </thead>
          <tbody>
            {
              datos.top_bans.map((item, index) => (
                <tr>
                  <td>
                    <span
                      class={`rank rank-${index + 1 <= 3 ? index + 1 : ""}`}
                    >
                      {index + 1}
                    </span>
                  </td>
                  <td>{item.campeon}</td>
                  <td>
                    <span class="value">{item.cantidad}</span>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>

    <!-- Récord de Kills -->
    <div id="stat-kills-record" class="stat-view" style="display: none;">
      <button class="btn-volver" onclick="volverSelector()">← Volver</button>
      <div class="stat-section">
        <h2 class="stat-title">💀 Récord de Kills Completo</h2>
        <table class="full-table">
          <thead>
            <tr><th>Pos</th><th>Jugador</th><th>Kills</th></tr>
          </thead>
          <tbody>
            {
              datos.top_kills.map((item, index) => (
                <tr>
                  <td>
                    <span
                      class={`rank rank-${index + 1 <= 3 ? index + 1 : ""}`}
                    >
                      {index + 1}
                    </span>
                  </td>
                  <td>{item.jugador}</td>
                  <td>
                    <span class="value">{item.kills}</span>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>

    <!-- Victorias Rápidas -->
    <div id="stat-victorias-cortas" class="stat-view" style="display: none;">
      <button class="btn-volver" onclick="volverSelector()">← Volver</button>
      <div class="stat-section">
        <h2 class="stat-title">⚡ Victorias Más Rápidas</h2>
        <table class="full-table">
          <thead>
            <tr><th>Pos</th><th>Equipo</th><th>Tiempo</th></tr>
          </thead>
          <tbody>
            {
              datos.top_victorias_cortas.map((item, index) => (
                <tr>
                  <td>
                    <span
                      class={`rank rank-${index + 1 <= 3 ? index + 1 : ""}`}
                    >
                      {index + 1}
                    </span>
                  </td>
                  <td>{item.equipo}</td>
                  <td>
                    <span class="value">{item.tiempo}</span>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>

    <!-- Top KDA -->
    <div id="stat-kda" class="stat-view" style="display: none;">
      <button class="btn-volver" onclick="volverSelector()">← Volver</button>
      <div class="stat-section">
        <h2 class="stat-title">📊 Top KDA Completo</h2>
        <table class="full-table">
          <thead>
            <tr><th>Pos</th><th>Jugador</th><th>KDA</th></tr>
          </thead>
          <tbody>
            {
              datos.top_kda.map((item, index) => (
                <tr>
                  <td>
                    <span
                      class={`rank rank-${index + 1 <= 3 ? index + 1 : ""}`}
                    >
                      {index + 1}
                    </span>
                  </td>
                  <td>{item.jugador}</td>
                  <td>
                    <span class="value">{item.kda}</span>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>

    <!-- Mayor Winrate -->
    <div id="stat-winrate" class="stat-view" style="display: none;">
      <button class="btn-volver" onclick="volverSelector()">← Volver</button>
      <div class="stat-section">
        <h2 class="stat-title">📈 Mayor Winrate Completo</h2>
        <table class="full-table">
          <thead>
            <tr><th>Pos</th><th>Campeón</th><th>Winrate</th></tr>
          </thead>
          <tbody>
            {
              datos.top_winrate.map((item, index) => (
                <tr>
                  <td>
                    <span
                      class={`rank rank-${index + 1 <= 3 ? index + 1 : ""}`}
                    >
                      {index + 1}
                    </span>
                  </td>
                  <td>{item.campeon}</td>
                  <td>
                    <span class="value">{item.winrate}%</span>
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>

    <!-- Menor Winrate -->
    {
      datos.low_winrate && datos.low_winrate.length > 0 && (
        <div id="stat-low-winrate" class="stat-view" style="display: none;">
          <button class="btn-volver" onclick="volverSelector()">
            ← Volver
          </button>
          <div class="stat-section">
            <h2 class="stat-title">📉 Menor Winrate Completo</h2>
            <table class="full-table">
              <thead>
                <tr>
                  <>
                    <th>Pos</th>
                    <th>Campeón</th>
                    <th>Winrate</th>
                  </>
                </tr>
              </thead>
              <tbody>
                {datos.low_winrate.map((item, index) => (
                  <tr>
                    <td>
                      <span class="rank">{index + 1}</span>
                    </td>
                    <td>{item.campeon}</td>
                    <td>
                      <span class="value low">{item.winrate}%</span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )
    }

    <!-- Kills por Campeón -->
    {
      datos.top_kills_c && datos.top_kills_c.length > 0 && (
        <div id="stat-kills-campeon" class="stat-view" style="display: none;">
          <button class="btn-volver" onclick="volverSelector()">
            ← Volver
          </button>
          <div class="stat-section">
            <h2 class="stat-title">🗡️ Kills por Campeón Completo</h2>
            <table class="full-table">
              <thead>
                <tr>
                  <>
                    <th>Pos</th>
                    <th>Campeón</th>
                    <th>Kills</th>
                  </>
                </tr>
              </thead>
              <tbody>
                {datos.top_kills_c.map((item, index) => (
                  <tr>
                    <td>
                      <span
                        class={`rank rank-${index + 1 <= 3 ? index + 1 : ""}`}
                      >
                        {index + 1}
                      </span>
                    </td>
                    <td>{item.campeon}</td>
                    <td>
                      <span class="value">{item.cantidad}</span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )
    }

    <!-- Primera Sangre -->
    {
      datos.top_sangre && datos.top_sangre.length > 0 && (
        <div id="stat-primera-sangre" class="stat-view" style="display: none;">
          <button class="btn-volver" onclick="volverSelector()">
            ← Volver
          </button>
          <div class="stat-section">
            <h2 class="stat-title">🩸 Primera Sangre Completo</h2>
            <table class="full-table">
              <thead>
                <tr>
                  <>
                    <th>Pos</th>
                    <th>Jugador</th>
                    <th>Cantidad</th>
                  </>
                </tr>
              </thead>
              <tbody>
                {datos.top_sangre.map((item, index) => (
                  <tr>
                    <td>
                      <span
                        class={`rank rank-${index + 1 <= 3 ? index + 1 : ""}`}
                      >
                        {index + 1}
                      </span>
                    </td>
                    <td>{item.jugador}</td>
                    <td>
                      <span class="value">{item.cantidad}</span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )
    }

    <!-- Equipos Distintos -->
    {
      datos.top_equipos_distintos && datos.top_equipos_distintos.length > 0 && (
        <div
          id="stat-equipos-distintos"
          class="stat-view"
          style="display: none;"
        >
          <button class="btn-volver" onclick="volverSelector()">
            ← Volver
          </button>
          <div class="stat-section">
            <h2 class="stat-title">🎭 Campeones Distintos por Equipo</h2>
            <table class="full-table">
              <thead>
                <tr>
                  <>
                    <th>Pos</th>
                    <th>Equipo</th>
                    <th>Campeones</th>
                  </>
                </tr>
              </thead>
              <tbody>
                {datos.top_equipos_distintos.map((item, index) => (
                  <tr>
                    <td>
                      <span
                        class={`rank rank-${index + 1 <= 3 ? index + 1 : ""}`}
                      >
                        {index + 1}
                      </span>
                    </td>
                    <td>{item.equipo}</td>
                    <td>
                      <span class="value">{item.cantidad}</span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )
    }

    <!-- Jugadores Distintos -->
    {
      datos.top_jugadores_distintos &&
        datos.top_jugadores_distintos.length > 0 && (
          <div
            id="stat-jugadores-distintos"
            class="stat-view"
            style="display: none;"
          >
            <button class="btn-volver" onclick="volverSelector()">
              ← Volver
            </button>
            <div class="stat-section">
              <h2 class="stat-title">🎮 Campeones Distintos por Jugador</h2>
              <table class="full-table">
                <thead>
                  <tr>
                    <>
                      <th>Pos</th>
                      <th>Jugador</th>
                      <th>Campeones</th>
                    </>
                  </tr>
                </thead>
                <tbody>
                  {datos.top_jugadores_distintos.map((item, index) => (
                    <tr>
                      <td>
                        <span
                          class={`rank rank-${index + 1 <= 3 ? index + 1 : ""}`}
                        >
                          {index + 1}
                        </span>
                      </td>
                      <td>{item.jugador}</td>
                      <td>
                        <span class="value">{item.cantidad}</span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )
    }

    <!-- Kills por Equipo -->
    {
      datos.top_kills_e && datos.top_kills_e.length > 0 && (
        <div id="stat-kills-equipo" class="stat-view" style="display: none;">
          <button class="btn-volver" onclick="volverSelector()">
            ← Volver
          </button>
          <div class="stat-section">
            <h2 class="stat-title">⚔️ Kills por Equipo Completo</h2>
            <table class="full-table">
              <thead>
                <tr>
                  <>
                    <th>Pos</th>
                    <th>Equipo</th>
                    <th>Kills</th>
                  </>
                </tr>
              </thead>
              <tbody>
                {datos.top_kills_e.map((item, index) => (
                  <tr>
                    <td>
                      <span
                        class={`rank rank-${index + 1 <= 3 ? index + 1 : ""}`}
                      >
                        {index + 1}
                      </span>
                    </td>
                    <td>{item.equipo}</td>
                    <td>
                      <span class="value">{item.cantidad}</span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )
    }

    <!-- Ancianos -->
    {
      datos.ancianos_por_equipo && datos.ancianos_por_equipo.length > 0 && (
        <div id="stat-ancianos" class="stat-view" style="display: none;">
          <button class="btn-volver" onclick="volverSelector()">
            ← Volver
          </button>
          <div class="stat-section">
            <h2 class="stat-title">🐉 Dragones Ancianos por Equipo</h2>
            <table class="full-table">
              <thead>
                <tr>
                  <>
                    <th>Pos</th>
                    <th>Equipo</th>
                    <th>Ancianos</th>
                  </>
                </tr>
              </thead>
              <tbody>
                {datos.ancianos_por_equipo.map((item, index) => (
                  <tr>
                    <td>
                      <span
                        class={`rank rank-${index + 1 <= 3 ? index + 1 : ""}`}
                      >
                        {index + 1}
                      </span>
                    </td>
                    <td>{item.equipo}</td>
                    <td>
                      <span class="value">{item.cantidad}</span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )
    }

    <!-- Barones -->
    {
      datos.barones_por_equipo && datos.barones_por_equipo.length > 0 && (
        <div id="stat-barones" class="stat-view" style="display: none;">
          <button class="btn-volver" onclick="volverSelector()">
            ← Volver
          </button>
          <div class="stat-section">
            <h2 class="stat-title">👑 Barones por Equipo</h2>
            <table class="full-table">
              <thead>
                <tr>
                  <>
                    <th>Pos</th>
                    <th>Equipo</th>
                    <th>Barones</th>
                  </>
                </tr>
              </thead>
              <tbody>
                {datos.barones_por_equipo.map((item, index) => (
                  <tr>
                    <td>
                      <span
                        class={`rank rank-${index + 1 <= 3 ? index + 1 : ""}`}
                      >
                        {index + 1}
                      </span>
                    </td>
                    <td>{item.equipo}</td>
                    <td>
                      <span class="value">{item.cantidad}</span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )
    }

    <!-- Pentakills -->
    {
      datos.pentakills_jugadores && datos.pentakills_jugadores.length > 0 && (
        <div id="stat-pentakills" class="stat-view" style="display: none;">
          <button class="btn-volver" onclick="volverSelector()">
            ← Volver
          </button>
          <div class="stat-section special">
            <h2 class="stat-title">🌟 Pentakills Conseguidos</h2>
            <div class="pentakills-grid">
              {datos.pentakills_jugadores.map((jugador) => (
                <div class="pentakill-badge">{jugador}</div>
              ))}
            </div>
          </div>
        </div>
      )
    }

    <!-- Estadísticas Generales -->
    {
      datos.estadisticas_generales && (
        <div id="stat-generales" class="stat-view" style="display: none;">
          <button class="btn-volver" onclick="volverSelector()">
            ← Volver
          </button>
          <div class="stat-section wide">
            <h2 class="stat-title">📊 Estadísticas Generales del Torneo</h2>
            <div class="stats-general">
              <div class="stat-item">
                <div class="stat-icon">🌟</div>
                <div class="stat-info">
                  <div class="stat-label">Pentakills Totales</div>
                  <div class="stat-value">
                    {datos.estadisticas_generales.cantidad_pentakills}
                  </div>
                </div>
              </div>
              <div class="stat-item">
                <div class="stat-icon">🎯</div>
                <div class="stat-info">
                  <div class="stat-label">Robos de Barón</div>
                  <div class="stat-value">
                    {datos.estadisticas_generales.robos_baron}
                  </div>
                </div>
              </div>
              <div class="stat-item">
                <div class="stat-icon">🔄</div>
                <div class="stat-info">
                  <div class="stat-label">Remontadas</div>
                  <div class="stat-value">
                    {datos.estadisticas_generales.remontadas}
                  </div>
                </div>
              </div>
              <div class="stat-item">
                <div class="stat-icon">🎮</div>
                <div class="stat-info">
                  <div class="stat-label">Campeones Distintos</div>
                  <div class="stat-value">
                    {datos.estadisticas_generales.campeones_distintos}
                  </div>
                </div>
              </div>
              <div class="stat-item full-width">
                <div class="stat-icon">
                  {datos.estadisticas_generales.teemo_jugado ? "✅" : "❌"}
                </div>
                <div class="stat-info">
                  <div class="stat-label">Teemo</div>
                  <div class="stat-value teemo">
                    {datos.estadisticas_generales.teemo_mensaje}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )
    }
  </div>

  <script is:inline>
    function mostrarEstadistica(id) {
      // Ocultar selector
      const selector = document.getElementById("selector-view");
      if (selector) selector.style.display = "none";

      // Ocultar todas las estadísticas
      document.querySelectorAll(".stat-view").forEach((view) => {
        view.style.display = "none";
      });

      // Mostrar la estadística seleccionada
      const stat = document.getElementById(`stat-${id}`);
      if (stat) stat.style.display = "block";

      // Scroll al inicio
      window.scrollTo(0, 0);
    }

    function volverSelector() {
      // Ocultar todas las estadísticas
      document.querySelectorAll(".stat-view").forEach((view) => {
        view.style.display = "none";
      });

      // Mostrar selector
      const selector = document.getElementById("selector-view");
      if (selector) selector.style.display = "grid";

      // Scroll al inicio
      window.scrollTo(0, 0);
    }
  </script>

  <style>
    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
    }

    h1 {
      text-align: center;
      color: #c89b3c;
      font-size: 3rem;
      margin-bottom: 0.5rem;
      text-shadow: 0 0 20px rgba(200, 155, 60, 0.5);
    }

    .subtitle {
      text-align: center;
      color: #a0a0a0;
      font-size: 1.2rem;
      margin-bottom: 3rem;
    }

    /* Selector */
    .selector-container {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 1.5rem;
      padding: 2rem 0;
    }

    .stat-card {
      background: linear-gradient(
        135deg,
        rgba(26, 31, 58, 0.9),
        rgba(40, 30, 70, 0.9)
      );
      border: 2px solid rgba(200, 155, 60, 0.3);
      border-radius: 16px;
      padding: 2rem 1.5rem;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 1rem;
      cursor: pointer;
      transition: all 0.3s ease;
      color: #fff;
      font-size: 1.1rem;
      font-weight: 600;
    }

    .stat-card:hover {
      transform: translateY(-8px);
      border-color: rgba(200, 155, 60, 0.6);
      box-shadow: 0 12px 32px rgba(200, 155, 60, 0.3);
      background: linear-gradient(
        135deg,
        rgba(40, 45, 70, 0.95),
        rgba(50, 40, 80, 0.95)
      );
    }

    .card-icon {
      font-size: 2.5rem;
    }

    .card-nombre {
      text-align: center;
      color: #ffd700;
      font-size: 0.95rem;
    }

    /* Botón Volver */
    .btn-volver {
      background: rgba(200, 155, 60, 0.2);
      border: 2px solid rgba(200, 155, 60, 0.5);
      border-radius: 10px;
      padding: 0.75rem 1.5rem;
      color: #ffd700;
      font-size: 1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      margin-bottom: 2rem;
      display: inline-block;
    }

    .btn-volver:hover {
      background: rgba(200, 155, 60, 0.4);
      border-color: rgba(200, 155, 60, 0.8);
      transform: translateX(-5px);
    }

    /* Vista de Estadísticas */
    .stat-view {
      animation: fadeIn 0.3s ease;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .stat-section {
      background: rgba(20, 25, 45, 0.6);
      border-radius: 20px;
      padding: 2rem;
      border: 2px solid rgba(200, 155, 60, 0.2);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    }

    .stat-section.special {
      background: linear-gradient(
        135deg,
        rgba(26, 31, 58, 0.9),
        rgba(50, 40, 80, 0.9)
      );
      border: 2px solid rgba(200, 155, 60, 0.4);
    }

    .stat-section.wide {
      max-width: 1200px;
      margin: 0 auto;
    }

    .stat-title {
      text-align: center;
      color: #ffd700;
      font-size: 2rem;
      margin-bottom: 2rem;
      text-shadow: 0 0 15px rgba(255, 215, 0, 0.4);
      padding-bottom: 1rem;
      border-bottom: 2px solid rgba(200, 155, 60, 0.3);
    }

    /* Tablas */
    .full-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1rem;
    }

    .full-table thead {
      background: rgba(200, 155, 60, 0.1);
    }

    .full-table th {
      padding: 1rem;
      text-align: left;
      color: #c89b3c;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 1px;
      font-size: 0.9rem;
    }

    .full-table th:last-child,
    .full-table td:last-child {
      text-align: right;
    }

    .full-table tbody tr {
      border-bottom: 1px solid rgba(255, 255, 255, 0.05);
      transition: background 0.2s ease;
    }

    .full-table tbody tr:hover {
      background: rgba(200, 155, 60, 0.05);
    }

    .full-table tbody tr:nth-child(1) {
      background: rgba(255, 215, 0, 0.1);
    }

    .full-table tbody tr:nth-child(2) {
      background: rgba(192, 192, 192, 0.1);
    }

    .full-table tbody tr:nth-child(3) {
      background: rgba(205, 127, 50, 0.1);
    }

    .full-table td {
      padding: 1rem;
      color: #d0d0d0;
    }

    .rank {
      display: inline-block;
      width: 30px;
      height: 30px;
      line-height: 30px;
      text-align: center;
      border-radius: 50%;
      background: rgba(200, 155, 60, 0.2);
      color: #c89b3c;
      font-weight: 700;
    }

    .rank-1 {
      background: linear-gradient(135deg, #ffd700, #ffed4e);
      color: #000;
    }

    .rank-2 {
      background: linear-gradient(135deg, #c0c0c0, #e8e8e8);
      color: #000;
    }

    .rank-3 {
      background: linear-gradient(135deg, #cd7f32, #d89a5a);
      color: #fff;
    }

    .value {
      font-weight: 600;
      color: #fff;
      font-size: 1.1rem;
    }

    .value.low {
      color: #ff6b6b;
    }

    /* Pentakills */
    .pentakills-grid {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      justify-content: center;
      padding: 2rem 0;
    }

    .pentakill-badge {
      background: linear-gradient(135deg, #ffd700, #ff8c00);
      color: #000;
      padding: 0.75rem 1.5rem;
      border-radius: 12px;
      font-weight: 700;
      font-size: 1.1rem;
      box-shadow: 0 4px 12px rgba(255, 215, 0, 0.4);
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    /* Estadísticas Generales */
    .stats-general {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5rem;
      padding: 1rem 0;
    }

    .stat-item {
      display: flex;
      align-items: center;
      gap: 1rem;
      background: rgba(255, 255, 255, 0.02);
      padding: 1.5rem;
      border-radius: 12px;
      border: 1px solid rgba(200, 155, 60, 0.1);
      transition: all 0.3s ease;
    }

    .stat-item:hover {
      background: rgba(200, 155, 60, 0.05);
      border-color: rgba(200, 155, 60, 0.3);
      transform: translateY(-2px);
    }

    .stat-item.full-width {
      grid-column: 1 / -1;
      justify-content: center;
    }

    .stat-icon {
      font-size: 2.5rem;
      filter: drop-shadow(0 0 10px rgba(200, 155, 60, 0.3));
    }

    .stat-info {
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
    }

    .stat-label {
      color: #a0a0a0;
      font-size: 0.9rem;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .stat-value {
      color: #c89b3c;
      font-size: 1.8rem;
      font-weight: 700;
      text-shadow: 0 0 10px rgba(200, 155, 60, 0.3);
    }

    .stat-value.teemo {
      font-size: 1.2rem;
    }

    @media (max-width: 1200px) {
      .selector-container {
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
        gap: 1rem;
      }
    }

    @media (max-width: 768px) {
      h1 {
        font-size: 2rem;
      }

      .subtitle {
        font-size: 1rem;
      }

      .selector-container {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      }

      .stat-card {
        padding: 1.5rem 1rem;
      }

      .card-icon {
        font-size: 2rem;
      }

      .card-nombre {
        font-size: 0.85rem;
      }

      .stat-section {
        padding: 1.5rem;
      }

      .full-table th,
      .full-table td {
        padding: 0.75rem 0.5rem;
        font-size: 0.9rem;
      }

      .stats-general {
        grid-template-columns: 1fr;
      }

      .stat-value {
        font-size: 1.5rem;
      }
    }
  </style>
</Layout>
